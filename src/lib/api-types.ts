/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get */
        get: operations["get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create admin
         * @description Create a new admin with email and password, returns JWT token and admin info
         */
        post: operations["post-create-admin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Admin Login
         * @description Login Admin or Superadmin with email and password, returns JWT token and admin info
         */
        post: operations["get-admin-login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current Admin's Profile
         * @description Retrieves the profile information for the currently authenticated admin user.
         */
        get: operations["get-current-admin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/professionals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upgrade a User to a Professional
         * @description ADMIN_ONLY. Upgrades an existing user to the 'professional' role and creates their public profile.
         */
        post: operations["create-professional"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/{idORmailORadminname}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Admin by ID OR Mail OR adminname
         * @description Retrieve admin information by admin ID. Returns public admin data.
         */
        get: operations["get-admin-by-identifier"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/articles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Articles
         * @description Retrieves a paginated and sorted list of all articles.
         */
        get: operations["get-all-articles"];
        put?: never;
        /**
         * Create a new article
         * @description Creates a new article. This endpoint is protected and requires admin or professional role.
         */
        post: operations["create-article"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/articles/id/{articleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Single Article by ID
         * @description Returns article type document from inserted object hex Id
         */
        get: operations["get-single-article-by-id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/articles/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Articles
         * @description Performs a full-text search for published articles by keyword in their title, summary, and tags.
         */
        get: operations["search-articles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/articles/sort-options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Article Sort Options
         * @description Retrieves the list of fields that the article list can be sorted by.
         */
        get: operations["get-article-sort-options"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/articles/{articleId}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get comments for an article
         * @description Retrieves a paginated and sorted list of all comments and their replies for a given article.
         */
        get: operations["get-article-comments"];
        put?: never;
        /** Create a top-level comment */
        post: operations["create-top-level-comment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/articles/{articleId}/link-document/{documentIdStringORHexId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Link Document to Article
         * @description PROFESSIONAL_OR_ADMIN. Links a verified document to an article, allowing the article to reference the structured content.
         */
        get: operations["link-document-to-article"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/articles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an article
         * @description ADMIN_ONLY. Updates an article's title, content, status, and other fields.
         */
        put: operations["update-article"];
        post?: never;
        /**
         * Delete an article
         * @description ADMIN_ONLY. Soft-deletes an article by changing its status to 'archived'.
         */
        delete: operations["delete-article"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/articles/{id}/permanent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Permanently delete an article
         * @description SUPERADMIN_ONLY. Permanently deletes an article and all its associated data. This action is irreversible.
         */
        delete: operations["hard-delete-article"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/articles/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an article's status
         * @description Changes the status of an article to 'draft', 'reviewed', or 'published'.
         */
        put: operations["update-article-status"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/articles/{id}/view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Record a view for an article
         * @description A lightweight endpoint to increment the view count for an article. It returns immediately and processes the count in the background.
         */
        post: operations["record-article-view"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/articles/{id}/vote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Vote on an article
         * @description Cast an upvote, downvote, or remove a vote from an article. Returns the new vote counts.
         */
        post: operations["vote-on-article"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/articles/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single article by its slug
         * @description Retrieves a single article by its URL-friendly slug. This endpoint is public and does not require authentication.
         */
        get: operations["get-article-by-slug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/comments/{commentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Edit a comment
         * @description Updates the content of a comment. Only the original author can edit their comment.
         */
        put: operations["update-comment"];
        post?: never;
        /**
         * Delete a comment
         * @description Soft-deletes a comment. Can be performed by the author or an admin.
         */
        delete: operations["delete-comment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/comments/{commentId}/permanent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Permanently delete a comment
         * @description SUPERADMIN_ONLY. Permanently deletes a comment and all of its replies. This action is irreversible.
         */
        delete: operations["hard-delete-comment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/comments/{commentId}/replies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a reply to a comment */
        post: operations["create-reply-to-comment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/comments/{commentId}/vote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Vote on a comment
         * @description Cast an upvote, downvote, or remove a vote from a comment.
         */
        post: operations["vote-on-comment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dictionary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a Dictionary Term
         * @description ADMIN_ONLY. Adds a new term and its definition to the legal dictionary.
         */
        post: operations["create-dictionary-term"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dictionary/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Dictionary Terms
         * @description Performs a full-text search for terms in the legal dictionary.
         */
        get: operations["search-dictionary-terms"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Public Legal Documents
         * @description Retrieves a paginated and sorted list of all public legal documents, suitable for the 'Laws and Policies' page.
         */
        get: operations["get-all-public-documents"];
        put?: never;
        /**
         * Scan and structure a document optionally for an article
         * @description PROFESSIONAL_OR_ADMIN. Upload a source file (PDF/image) to be scanned, structured, and linked to a draft article. Returns the structured data for frontend verification.
         */
        post: operations["process-new-document"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/documents/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Legal Documents
         * @description Retrieves a paginated and sorted list of all legal documents, including private ones.
         */
        get: operations["get-all-documents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/documents/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Legal Documents
         * @description Performs a full-text search for public legal documents by keyword in their title or unique ID string.
         */
        get: operations["search-documents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/documents/structured/{documentIdStringORHexId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Structured Document Content
         * @description Retrieves the full, structured content of a public legal document, deserialized from Protobuf into JSON.
         */
        get: operations["get-structured-document"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/documents/{docId}/versions/{version}/clauses/{clauseId}/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add metadata to a clause
         * @description PROFESSIONAL_OR_ADMIN. Manually adds metadata (like a cross-reference or definition) to a clause.
         */
        post: operations["add-metadata"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/documents/{docId}/versions/{version}/clauses/{clauseId}/metadata/{metaId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove metadata from a clause
         * @description PROFESSIONAL_OR_ADMIN. Removes a specific piece of metadata from a clause.
         */
        delete: operations["remove-metadata"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/documents/{docId}/versions/{version}/clauses/{clauseId}/reference": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a cross-reference to a clause
         * @description PROFESSIONAL_OR_ADMIN. Manually adds a cross-reference link from a phrase within a clause to another section.
         */
        post: operations["add-cross-reference"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/documents/{docId}/versions/{version}/sections/{sectionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a section's title
         * @description PROFESSIONAL_OR_ADMIN. Updates the title/heading of a specific section.
         */
        put: operations["update-section-title"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/documents/{documentIdStringORHexId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Single Legal Document
         * @description Retrieves the full details of a single legal document by its ID, including all versions and structured content.
         */
        get: operations["get-document-by-id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/documents/{documentId}/finalize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Structure. Submit verified document structure
         * @description PROFESSIONAL_OR_ADMIN. Submits the final, human-verified structured document. This moves the document to .
         */
        put: operations["finalize-document-for-article"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/documents/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Document Status
         * @description Changes the status of a document (e.g., from 'private' to 'public').
         */
        patch: operations["update-document-status"];
        trace?: never;
    };
    "/api/v1/feed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the Public Article Feed
         * @description Retrieves a paginated list of published articles, filtered by 'trending', 'recent', or 'popular'.
         */
        get: operations["get-public-feed"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * LOGOUT ALL
         * @description Logs out the current or admin by clearing all the cookies.
         */
        post: operations["post-logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/professionals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Professional Profiles
         * @description Retrieves a paginated and sorted list of all verified professional profiles.
         */
        get: operations["get-all-professionals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/professionals/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Professional Profiles
         * @description Performs a full-text search for verified professionals by keyword in their name, title, or expertise.
         */
        get: operations["search-professionals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/professionals/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Single Professional's Profile
         * @description Retrieves the public profile of a single verified professional by their ID.
         */
        get: operations["get-professional-by-id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/scan/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Scan Images or PDFs
         * @description Performs OCR on one or more uploaded files (images or PDFs). Files should be provided in a multipart form with the field name 'files'.
         */
        post: operations["post-ocr-scan"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create User
         * @description Create a new user with email and password, returns JWT token and user info
         */
        post: operations["post-create-user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User Login
         * @description Login user with email and password, returns JWT token and user info
         */
        post: operations["get-user-login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get your information
         * @description Retrieve user information by user ID with the token you're logged in. Returns public user data.
         */
        get: operations["get-user-details"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Users
         * @description ADMIN_ONLY. Retrieves a paginated list of all users. This endpoint is restricted to admin and superadmin roles.
         */
        get: operations["get-all-users"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/users/sort-options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Sort Options
         * @description ADMIN_ONLY. Retrieves the list of fields that the user list can be sorted by.
         */
        get: operations["get-user-sort-options"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/users/{idORmailORusername}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User by ID OR Mail OR username
         * @description ADMIN_ONLY. Retrieve user information by user ID. Returns public user data.
         */
        get: operations["get-user-by-identifier"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/healthz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get healthz */
        get: operations["get-healthz"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AddCrossReferenceInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Optional: The ID of the specific clause being referenced. */
            targetClauseId?: string;
            /** @description The ID of the section being referenced (e.g., 'section-3'). */
            targetSectionId: string;
            /** @description The exact text in the clause that forms the reference (e.g., 'sub-section (3)'). */
            text: string;
        };
        AddMetadataInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description The definition for a jargon term. */
            definition?: string;
            /** @description The ID of the section being referenced. */
            targetSectionId?: string;
            /** @description The exact text in the clause that forms the reference. */
            text: string;
        };
        AdminAuthOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Basic admin information */
            admin: components["schemas"]["AdminOutput"];
            /** @description JWT token for authenticated requests */
            token: string;
        };
        AdminOutput: {
            Body: components["schemas"]["AdminOutputBody"];
        };
        AdminOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description Admin's address, optional */
            address?: string;
            /** @description Admin's unique adminname, alphanumeric and underscores only, 3-50 chars */
            adminname: string;
            /** @description Admin's bio or description, optional */
            bio?: string;
            /**
             * Format: date-time
             * @description Creation timestamp of the admin record
             */
            createdAt: string;
            /** @description Unique Email for the admin */
            email: string;
            /** @description First name of the admin, optional */
            firstName?: string;
            /** @description Unique identifier for the admin */
            id: string;
            /** @description URL of the admin's profile image, optional */
            imageUrl?: string;
            /** @description Last name of the admin, optional */
            lastName?: string;
            /** @description Admin's phone number, optional */
            phone?: string;
            /** @description Admin preferences or settings, optional */
            preferences?: {
                [key: string]: unknown;
            };
            /** @description Admin's role, one of 'admin', 'professional', 'admin', 'superadmin' */
            role: string;
            /** @description Admin's social media links, optional */
            socialLinks?: {
                [key: string]: string;
            };
            /**
             * Format: date-time
             * @description Last update timestamp of the admin record
             */
            updatedAt: string;
            /** @description desc:Verification status for different methods, optional */
            verified?: {
                [key: string]: boolean;
            };
        };
        ArticleOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            authorId: string;
            authorType: string;
            content: components["schemas"]["TranslatedString"];
            /** Format: date-time */
            createdAt: string;
            documentReferences: string[] | null;
            id: string;
            /** Format: date-time */
            publishedAt?: string;
            slug: string;
            stats: components["schemas"]["ArticleStats"];
            status: string;
            summary: components["schemas"]["TranslatedString"];
            tags: string[] | null;
            title: components["schemas"]["TranslatedString"];
            /** Format: date-time */
            updatedAt: string;
        };
        ArticleStats: {
            /** Format: int64 */
            commentCount: number;
            /** Format: int64 */
            downvoteCount: number;
            /** Format: double */
            popularityScore: number;
            /** Format: int64 */
            upvoteCount: number;
            /** Format: int64 */
            viewCount: number;
        };
        BackLink: {
            context?: string;
            source_document_id?: string;
            source_section_id?: string;
        };
        Chapter: {
            chapter_id?: string;
            sections?: components["schemas"]["Section"][] | null;
            title?: string;
        };
        Clause: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            clause_id?: string;
            original_text?: string;
            word_metadata?: components["schemas"]["WordMetadata"][] | null;
        };
        CommentAuthorOutput: {
            id: string;
            imageUrl?: string;
            name: string;
        };
        CommentOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            articleId: string;
            author: components["schemas"]["CommentAuthorOutput"];
            content: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: int64 */
            depth: number;
            id: string;
            isDeleted: boolean;
            isEdited: boolean;
            path: string;
            stats: components["schemas"]["CommentStats"];
            /** Format: date-time */
            updatedAt: string;
        };
        CommentStats: {
            /** Format: int64 */
            downvoteCount: number;
            /** Format: int64 */
            replyCount: number;
            /** Format: int64 */
            upvoteCount: number;
        };
        CreateAdminInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description desc:Admin's address, optional */
            address?: string;
            /** @description minLength:3,maxLength:50,pattern:^[a-zA-Z0-9_]+$, desc:Unique adminname, alphanumeric and underscores only, 3-50 chars */
            adminname: string;
            /** @description desc:Admin's bio or description, optional */
            bio?: string;
            /** @description minLength:5,maxLength:100, desc:Admin's email address */
            email: string;
            /** @description desc:Admin's first name, optional */
            firstName?: string;
            /** @description desc:URL of the admin's profile image, optional */
            imageUrl?: string;
            /** @description desc:Admin's last name, optional */
            lastName?: string;
            /** @description minLength:8,maxLength:50, desc:Admin's password (min 8 chars) */
            password: string;
            /** @description desc:Admin's phone number, optional */
            phone?: string;
            /** @description desc:Admin preferences or settings, optional */
            preferences?: {
                [key: string]: unknown;
            };
            /** @description desc:Referral code used by the admin, optional */
            referralCode?: string;
            /** @description desc:Admin ID or email or adminname of the admin who referred this admin, optional */
            referredBy?: string;
            /** @description enum:admin,professional,admin,superadmin, desc:Admin role, one of 'admin', 'superadmin' */
            role?: string;
            /** @description desc:Admin's social media links, optional */
            socialLinks?: {
                [key: string]: string;
            };
        };
        CreateArticleInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description The full content of the article in Markdown or HTML. */
            content: components["schemas"]["TranslatedString"];
            /** @description Optional: The ID of an existing, verified document to link this article to. */
            existingDocumentId?: string;
            /**
             * @description The status of the article.
             * @default draft
             * @enum {string}
             */
            status: "draft" | "pending_admin_review" | "reviewed" | "published" | "archived";
            /** @description A brief summary of the article. */
            summary: components["schemas"]["TranslatedString"];
            /** @description A list of relevant tags. */
            tags: string[] | null;
            /** @description The title of the article in English and Nepali. */
            title: components["schemas"]["TranslatedString"];
        };
        CreateCommentInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description The text content of the comment. */
            content: string;
        };
        CreateProfessionalInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            bio?: string;
            currentPosition?: string;
            expertiseTags?: string[] | null;
            /** @description The professional's full name for their profile. */
            fullName: string;
            location?: string;
            politicalParty?: string;
            profileImageUrl?: string;
            /** @description The professional's title (e.g., 'Member of Parliament'). */
            profileTitle: string;
            /** @description The ID of the user to upgrade. */
            userId: string;
        };
        CreateReplyInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description The text content of the reply. */
            content: string;
        };
        CreateTermInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            category?: string;
            definition: components["schemas"]["TranslatedString"];
            source?: string;
            term: string;
        };
        CreateUserInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description desc:User's address, optional */
            address?: string;
            /** @description desc:User's bio or description, optional */
            bio?: string;
            /** @description minLength:5,maxLength:100, desc:User's email address */
            email: string;
            /** @description desc:User's first name, optional */
            firstName?: string;
            /** @description desc:URL of the user's profile image, optional */
            imageUrl?: string;
            /** @description desc:User's last name, optional */
            lastName?: string;
            /** @description minLength:8,maxLength:50, desc:User's password (min 8 chars) */
            password: string;
            /** @description desc:User's phone number, optional */
            phone?: string;
            /** @description desc:User preferences or settings, optional */
            preferences?: {
                [key: string]: unknown;
            };
            /** @description desc:Referral code used by the user, optional */
            referralCode?: string;
            /** @description desc:User ID or email or username of the user who referred this user, optional */
            referredBy?: string;
            /** @description enum:user,professional, desc:User role, one of 'user', 'professional' */
            role?: string;
            /** @description desc:User's social media links, optional */
            socialLinks?: {
                [key: string]: string;
            };
            /** @description minLength:3,maxLength:50,pattern:^[a-zA-Z0-9_]+$, desc:Unique username, alphanumeric and underscores only, 3-50 chars */
            username: string;
        };
        CrossReference: {
            context?: string;
            target_clause_id?: string;
            target_section_id?: string;
        };
        DocumentStats: {
            /** Format: int64 */
            totalCrossReferences: number;
            /** Format: int64 */
            totalParagraphs: number;
            /** Format: int64 */
            totalSections: number;
            /** Format: int64 */
            totalWords: number;
        };
        DocumentVersion: {
            /** Format: date-time */
            amendmentDate: string;
            amendmentNotes: string;
            stats: components["schemas"]["DocumentStats"];
            versionNumber: string;
        };
        ErrorDetail: {
            /** @description Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id' */
            location?: string;
            /** @description Error message text */
            message?: string;
            /** @description The value at the given location */
            value?: unknown;
        };
        ErrorModel: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            detail?: string;
            /** @description Optional list of individual error details */
            errors?: components["schemas"]["ErrorDetail"][] | null;
            /**
             * Format: uri
             * @description A URI reference that identifies the specific occurrence of the problem.
             */
            instance?: string;
            /**
             * Format: int64
             * @description HTTP status code
             */
            status?: number;
            /** @description A short, human-readable summary of the problem type. This value should not change between occurrences of the error. */
            title?: string;
            /**
             * Format: uri
             * @description A URI reference to human-readable documentation for the error.
             * @default about:blank
             */
            type: string;
        };
        GetSortOptionsOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            data: string[] | null;
        };
        HealthCheckOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description API health status */
            status: string;
        };
        HealthStatus: {
            database: string;
            /** Format: double */
            load: number;
            server: string;
        };
        LegalDocument: {
            /** Format: date-time */
            CreatedAt: string;
            DocumentIDString: string;
            ID: string;
            OwnerID: string;
            OwnerType: string;
            Status: string;
            Title: string;
            /** Format: date-time */
            UpdatedAt: string;
            Versions: components["schemas"]["DocumentVersion"][] | null;
        };
        LegalDocumentBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            LegalDocument: components["schemas"]["LegalDocument"];
        };
        LegalDocumentContent: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            chapters?: components["schemas"]["Chapter"][] | null;
            preamble?: string;
        };
        LoginInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description User or admin's email address or username */
            identifier: string;
            /** @description User's password -- minLength:8,maxLength:50 */
            password: string;
        };
        LogoutOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description A confirmation message */
            message: string;
        };
        MetadataContact: {
            email: string;
            name: string;
            url: string;
        };
        MetadataLinks: {
            privacyPolicy: string;
            self: string;
        };
        MetadataOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            contact: components["schemas"]["MetadataContact"];
            description: string;
            documentation: string;
            environment: string;
            health: components["schemas"]["HealthStatus"];
            links: components["schemas"]["MetadataLinks"];
            service: string;
            status: string;
            uptime: string;
            version: string;
        };
        PaginatedResponseArticleOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            data: components["schemas"]["ArticleOutputBody"][] | null;
            meta: components["schemas"]["PaginationMeta"];
        };
        PaginatedResponseCommentOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            data: components["schemas"]["CommentOutputBody"][] | null;
            meta: components["schemas"]["PaginationMeta"];
        };
        PaginatedResponseLegalDocument: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            data: components["schemas"]["LegalDocument"][] | null;
            meta: components["schemas"]["PaginationMeta"];
        };
        PaginatedResponseProfessionalOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            data: components["schemas"]["ProfessionalOutputBody"][] | null;
            meta: components["schemas"]["PaginationMeta"];
        };
        PaginatedResponseUserOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            data: components["schemas"]["UserOutputBody"][] | null;
            meta: components["schemas"]["PaginationMeta"];
        };
        PaginationMeta: {
            /** Format: int64 */
            currentPage: number;
            hasNextPage: boolean;
            hasPrevPage: boolean;
            /** Format: int64 */
            itemsPerPage: number;
            /** Format: int64 */
            totalItems: number;
            /** Format: int64 */
            totalPages: number;
        };
        ProfessionalOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            bio?: string;
            /** Format: date-time */
            createdAt: string;
            currentPosition?: string;
            expertiseTags?: string[] | null;
            fullName: string;
            id: string;
            isVerified: boolean;
            location?: string;
            politicalParty?: string;
            profileImageUrl?: string;
            profileTitle: string;
            stats: components["schemas"]["ProfessionalStats"];
            userId: string;
        };
        ProfessionalStats: {
            /** Format: int64 */
            articlesAuthored: number;
            /** Format: double */
            rating: number;
        };
        ScanOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            results: components["schemas"]["ScanPageOutput"][] | null;
        };
        ScanPageOutput: {
            fileName: string;
            /** Format: int64 */
            pageNumber: number;
            text: string;
        };
        SearchOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            results: components["schemas"]["SearchResultItem"][] | null;
        };
        SearchResultItem: {
            id: string;
            /** Format: double */
            matchScore?: number;
            summary: string;
            title: string;
            type: string;
            url: string;
        };
        Section: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            clauses?: components["schemas"]["Clause"][] | null;
            referenced_by?: components["schemas"]["BackLink"][] | null;
            section_id?: string;
            title?: string;
        };
        TranslatedString: {
            /** @description The content in English. */
            en: string;
            /** @description The content in Nepali. */
            np: string;
        };
        UpdateArticleInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description The updated full content of the article. */
            content: components["schemas"]["TranslatedString"];
            /**
             * @description The updated status of the article.
             * @enum {string}
             */
            status: "published" | "draft" | "reviewed";
            /** @description The updated summary of the article. */
            summary: components["schemas"]["TranslatedString"];
            /** @description The updated list of relevant tags. */
            tags: string[] | null;
            /** @description The updated title of the article. */
            title: components["schemas"]["TranslatedString"];
        };
        UpdateArticleStatusInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * @description The new status for the article.
             * @enum {string}
             */
            status: "draft" | "pending_admin_review" | "reviewed" | "published" | "archived";
        };
        UpdateCommentInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description The new text content for the comment. */
            content: string;
        };
        UpdateDocumentStatusInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * @description The new status for the document.
             * @default private
             * @enum {string}
             */
            status: "public" | "private" | "archived";
        };
        UpdateDocumentStatusOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            message: string;
        };
        UpdateSectionTitleInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            newTitle: string;
        };
        UserAuthOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description JWT token for authenticated requests */
            token: string;
            /** @description Basic public user information */
            user: components["schemas"]["UserOutput"];
        };
        UserOutput: {
            Body: components["schemas"]["UserOutputBody"];
        };
        UserOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** @description User's address, optional */
            address?: string;
            /** @description User's bio or description, optional */
            bio?: string;
            /**
             * Format: date-time
             * @description Creation timestamp of the user record
             */
            createdAt: string;
            /** @description Unique Email for the user */
            email: string;
            /** @description First name of the user, optional */
            firstName?: string;
            /** @description Unique identifier for the user */
            id: string;
            /** @description URL of the user's profile image, optional */
            imageUrl?: string;
            /** @description Last name of the user, optional */
            lastName?: string;
            /** @description User's phone number, optional */
            phone?: string;
            /** @description User preferences or settings, optional */
            preferences?: {
                [key: string]: unknown;
            };
            /** @description User's role, one of 'user', 'professional' */
            role: string;
            /** @description User's social media links, optional */
            socialLinks?: {
                [key: string]: string;
            };
            /**
             * Format: date-time
             * @description Last update timestamp of the user record
             */
            updatedAt: string;
            /** @description User's unique username, alphanumeric and underscores only, 3-50 chars */
            username: string;
            /** @description desc:Verification status for different methods, optional */
            verified?: {
                [key: string]: boolean;
            };
        };
        VoteInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * @description The type of vote to cast.
             * @enum {string}
             */
            voteType: "up" | "down" | "none";
        };
        VoteOnCommentInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /**
             * @description The type of vote to cast.
             * @enum {string}
             */
            voteType: "up" | "down" | "none";
        };
        VoteOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             */
            readonly $schema?: string;
            /** Format: int64 */
            downvotes: number;
            /** Format: int64 */
            upvotes: number;
        };
        WordMetadata: {
            cross_reference?: components["schemas"]["CrossReference"];
            definition?: string;
            /** Format: int32 */
            end_position?: number;
            metadata_id?: string;
            /** Format: int32 */
            start_position?: number;
            text?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetadataOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "post-create-admin": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAdminInputBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    "Set-Cookie"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminAuthOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-admin-login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginInputBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "Set-Cookie"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminAuthOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-current-admin": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-professional": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProfessionalInputBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfessionalOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-admin-by-identifier": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                /**
                 * @description Either the admin's ID, email, or adminname to retrieve the admin information
                 * @example axyut
                 */
                idORmailORadminname: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-all-articles": {
        parameters: {
            query?: {
                /** @description The page number to retrieve. */
                page?: number;
                /** @description The number of items to return per page. */
                limit?: number;
                /** @description Field to sort by. */
                sortBy?: string;
                /** @description Sort order (asc or desc). */
                sortOrder?: "asc" | "desc";
            };
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseArticleOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-article": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateArticleInputBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArticleOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-single-article-by-id": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the article to retrieve. */
                articleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArticleOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "search-articles": {
        parameters: {
            query: {
                /** @description The search query string. */
                q: string;
                /** @description The maximum number of results to return. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-article-sort-options": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSortOptionsOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-article-comments": {
        parameters: {
            query?: {
                /** @description Sort comments by 'popular' (net votes) or 'recent' (creation date). */
                sortBy?: "popular" | "recent";
                /** @description Page number for top-level comments. */
                page?: number;
                /** @description Number of top-level comments per page. */
                limit?: number;
            };
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                articleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseCommentOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-top-level-comment": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                articleId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCommentInputBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "link-document-to-article": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                /** @description The ID of the article to link the document to. */
                articleId: string;
                /** @description The human-readable unique ID of the document to link. */
                documentIdStringORHexId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-article": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                /** @description The ID of the article to update. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateArticleInputBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArticleOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-article": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                /** @description The ID of the article to delete. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "hard-delete-article": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                /** @description The ID of the article to delete. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-article-status": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                /** @description The ID of the article to update. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateArticleStatusInputBody"];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "record-article-view": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the article that was viewed. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "vote-on-article": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                /** @description The ID of the article to vote on. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VoteInputBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VoteOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-article-by-slug": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                /** @description The URL-friendly slug of the article. */
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArticleOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-comment": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                commentId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCommentInputBody"];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-comment": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                commentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "hard-delete-comment": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                commentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-reply-to-comment": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                commentId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateReplyInputBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "vote-on-comment": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                commentId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VoteOnCommentInputBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VoteOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "create-dictionary-term": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTermInputBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    Category?: string;
                    Definition?: components["schemas"]["TranslatedString"];
                    ID?: string;
                    Source?: string;
                    Term?: string;
                    UpdatedAt?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "search-dictionary-terms": {
        parameters: {
            query: {
                /** @description The search query string. */
                q: string;
                /** @description The maximum number of results to return. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-all-public-documents": {
        parameters: {
            query?: {
                /** @description The page number to retrieve. */
                page?: number;
                /** @description The number of items to return per page. */
                limit?: number;
                /** @description Field to sort by. */
                sortBy?: string;
                /** @description Sort order (asc or desc). */
                sortOrder?: "asc" | "desc";
            };
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseLegalDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "process-new-document": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /**
                     * @description The type of legal document being uploaded.
                     * @default generic
                     * @enum {string}
                     */
                    documentType?: "act" | "policy" | "regulation" | "law" | "generic";
                    /** Format: binary */
                    file: string;
                    /** @default 1.0 */
                    versionNumber?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LegalDocumentBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-all-documents": {
        parameters: {
            query?: {
                /** @description The page number to retrieve. */
                page?: number;
                /** @description The number of items to return per page. */
                limit?: number;
                /** @description Field to sort by. */
                sortBy?: string;
                /** @description Sort order (asc or desc). */
                sortOrder?: "asc" | "desc";
            };
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseLegalDocument"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "search-documents": {
        parameters: {
            query: {
                /** @description The search query string. */
                q: string;
                /** @description The maximum number of results to return. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-structured-document": {
        parameters: {
            query?: {
                /** @description Optional: The specific version number to retrieve. Defaults to the latest. */
                version?: string;
            };
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                /** @description The human-readable unique ID of the document (e.g., 'constitution-of-nepal-2072'). */
                documentIdStringORHexId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LegalDocumentContent"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "add-metadata": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                docId: string;
                version: string;
                clauseId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddMetadataInputBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Clause"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "remove-metadata": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                docId: string;
                version: string;
                clauseId: string;
                metaId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Clause"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "add-cross-reference": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                docId: string;
                version: string;
                clauseId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddCrossReferenceInputBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Clause"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-section-title": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                docId: string;
                version: string;
                sectionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSectionTitleInputBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Section"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-document-by-id": {
        parameters: {
            query?: {
                /** @description Optional: The specific version number to retrieve. Defaults to the latest. */
                version?: string;
            };
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                /** @description The human-readable unique ID of the document (e.g., 'constitution-of-nepal-2072'). */
                documentIdStringORHexId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LegalDocumentBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "finalize-document-for-article": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                documentId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LegalDocumentContent"];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LegalDocumentBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "update-document-status": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                /** @description The ID of the document to update. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateDocumentStatusInputBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateDocumentStatusOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-public-feed": {
        parameters: {
            query?: {
                /** @description The page number to retrieve. */
                page?: number;
                /** @description The number of items to return per page. */
                limit?: number;
                /** @description The filter to apply to the feed. */
                filter?: "trending" | "recent" | "popular";
                /** @description Sort order (asc or desc). */
                sortOrder?: "asc" | "desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseArticleOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "post-logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    Domain?: string;
                    Expires?: string;
                    HttpOnly?: boolean;
                    MaxAge?: number;
                    Name?: string;
                    Partitioned?: boolean;
                    Path?: string;
                    Quoted?: boolean;
                    Raw?: string;
                    RawExpires?: string;
                    SameSite?: number;
                    Secure?: boolean;
                    "Set-Cookie"?: string;
                    Unparsed?: string;
                    Value?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogoutOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-all-professionals": {
        parameters: {
            query?: {
                /** @description The page number to retrieve. */
                page?: number;
                /** @description The number of items to return per page. */
                limit?: number;
                /** @description Field to sort by. */
                sortBy?: string;
                /** @description Sort order (asc or desc). */
                sortOrder?: "asc" | "desc";
            };
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseProfessionalOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "search-professionals": {
        parameters: {
            query: {
                /** @description The search query string. */
                q: string;
                /** @description The maximum number of results to return. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-professional-by-id": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                /** @description The ID of the professional to retrieve. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfessionalOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "post-ocr-scan": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    files?: string[];
                    /**
                     * @description Tesseract language code(s) for all files (e.g., 'eng', 'nep', 'eng+hin').
                     * @default nep
                     */
                    lang?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScanOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "post-create-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserInputBody"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    "Set-Cookie"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAuthOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-user-login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginInputBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    "Set-Cookie"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAuthOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-user-details": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-all-users": {
        parameters: {
            query?: {
                /** @description The page number to retrieve. */
                page?: number;
                /** @description The number of items to return per page. */
                limit?: number;
                /** @description Field to sort by. */
                sortBy?: string;
                /** @description Sort order (asc or desc). */
                sortOrder?: "asc" | "desc";
            };
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponseUserOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-user-sort-options": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSortOptionsOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-user-by-identifier": {
        parameters: {
            query?: never;
            header?: {
                /** @description Bearer token */
                Authorization?: string;
            };
            path: {
                /**
                 * @description Either the user's ID, email, or username to retrieve the user information
                 * @example axyut
                 */
                idORmailORusername: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-healthz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthCheckOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
}
